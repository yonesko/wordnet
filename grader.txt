See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (2 warnings)
Checkstyle:   FAILED (0 errors, 2 warnings)

Correctness:  26/36 tests passed
Memory:       4/4 tests passed
Timing:       18/27 tests passed

Aggregate score: 76.67%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 494 Oct 14 18:22 Outcast.java
4.1K Oct 14 18:22 SAP.java
4.1K Oct 14 18:22 WordNet.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac11 SAP.java
*-----------------------------------------------------------

% javac11 WordNet.java
*-----------------------------------------------------------

% javac11 Outcast.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
SAP:

WordNet:

Outcast:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
Outcast.java:8: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
Outcast.java:12: Avoid unused parameter variables, such as 'wordnet'. [UnusedFormalParameter]
PMD ends with 2 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Outcast.java:12:5: Define constructors after static and instance variables but before methods. [DeclarationOrder]
[WARN] WordNet.java:68:17: The local (or parameter) variable 'hypernyms' has the same name as an instance variable. Use a different name. [HiddenField]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for SAP.java
*-----------------------------------------------------------

% custom checkstyle checks for WordNet.java
*-----------------------------------------------------------
[INFO] WordNet.java:7: The program uses neither 'DirectedCycle' nor 'Topological' to check whether the digraph is a DAG. [Design]

% custom checkstyle checks for Outcast.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of SAP
*-----------------------------------------------------------
Running 20 total tests.

Test 1: check length() and ancestor() on fixed digraphs
  * digraph1.txt
  * digraph2.txt
  * digraph3.txt
  * digraph4.txt
  * digraph5.txt
  * digraph6.txt
  * digraph9.txt
==> passed

Test 2: check length() and ancestor() on WordNet digraph
  * 100 random vertex pairs in digraph-wordnet.txt
==> passed

Test 3: check length() and ancestor() on directed paths
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 4: check length() and ancestor() on directed cycles
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 5: check length() and ancestor() on complete graphs
  * 5
  * 10
  * 20
  * 50
==> passed

Test 6: check length() and ancestor() on tournament digraphs
  * 5
  * 10
  * 20
  * 50
==> passed

Test 7: check length() and ancestor() on complete binary trees
  * 5
  * 10
  * 20
  * 50
  * 100
==> passed

Test 8: check length() and ancestor() on random DAGs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==> passed

Test 9: check length() and ancestor() on random rooted-in DAGs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==> passed

Test 10: check length() and ancestor() on random rooted-out DAGs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==> passed

Test 11: check length() and ancestor() on random rooted-in trees
  * 5 vertices
  * 10 vertices
  * 20 vertices
==> passed

Test 12: check length() and ancestor() on random rooted-out trees
  * 5 vertices
  * 10 vertices
  * 20 vertices
==> passed

Test 13: check length() and ancestor() on random simple digraphs
  * 5 vertices, 8 edges
  * 10 vertices, 40 edges
  * 20 vertices, 100 edges
==> passed

Test 14: check whether two SAP objects can be created at the same time
  * digraph1.txt and digraph2.txt
  * digraph3.txt and digraph4.txt
  * digraph5.txt and digraph6.txt
  * digraph2.txt and digraph1.txt
==> passed

Test 15: check whether SAP is immutable
  * digraph1.txt
  * digraph2.txt
  * digraph3.txt
  * digraph4.txt
  * digraph5.txt
  * digraph6.txt
  * digraph-ambiguous-ancestor.txt
==> passed

Test 16: check length() and ancestor() with iterable arguments
  * 100 random subsets of 1 and 1 vertices in digraph-wordnet.txt
  * 100 random subsets of 1 and 2 vertices in digraph-wordnet.txt
  * 100 random subsets of 2 and 1 vertices in digraph-wordnet.txt
  * 100 random subsets of 2 and 2 vertices in digraph-wordnet.txt
  * 100 random subsets of 3 and 11 vertices in digraph-wordnet.txt
  * 100 random subsets of 11 and 3 vertices in digraph-wordnet.txt
==> passed

Test 17: check length() and ancestor() with zero-length iterable arguments
  * 100 random subsets of 0 and 5 vertices in digraph-wordnet.txt
  * 100 random subsets of 5 and 0 vertices in digraph-wordnet.txt
  * 100 random subsets of 0 and 0 vertices in digraph-wordnet.txt
==> passed

Test 18: check length() and ancestor() with invalid arguments
  * G = digraph1.txt v = -1, w = 0
  * G = digraph1.txt v = 0, w = -1
  * G = digraph1.txt v = 13, w = 0
  * G = digraph1.txt v = 0, w = 13
==> passed

Test 19: check iterable versions of length() and ancestor() with invalid arguments
  * G = digraph1.txt, v = { 0, 7, 9, 12 }, w = null
  * G = digraph1.txt, v = null, w = { 1, 2, 4, 5, 10 }
  * G = digraph1.txt, v = null, w = null
  * G = digraph1.txt, v = { 0, 7, 9, 12, -1 }, w = { 1, 2, 4, 5, 10 }
  * G = digraph1.txt, v = { 0, 7, 9, 12 }, w = { 1, 2, -1, 4, 5, 10 }
  * G = digraph1.txt, v = { 13, 0, 7, 9, 12 }, w = { 1, 2, 4, 5, 10 }
  * G = digraph1.txt, v = { 0, 7, 9, 12 }, w = { 1, 2, 4, 5, 13, 10 }
  * G = digraph1.txt, v = { 0, null, 7, 9, 12 }, w = { 1, 2, 4, 5, 10 }
  * G = digraph1.txt, v = { 0, 7, 9, 12 }, w = { 1, 2, 4, null, 5, 10 }
==> passed

Test 20: random calls to both version of length() and ancestor(),
         with probabilities p1 and p2, respectively
  * random calls in a random rooted DAG (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
  * random calls in a random digraph (20 vertices, 100 edges)
    (p1 = 0.5, p2 = 0.5)
==> passed


Total: 20/20 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP)
********************************************************************************

Testing correctness of WordNet
*-----------------------------------------------------------
Running 14 total tests.

Test 1: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
    - failed on pair 2 of 1000
    - nounA = cappelletti
    - nounB = alphavirus
    - student   distance() = 13
    - reference distance() = 11

==> FAILED

Test 2: check distance() with all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
    - failed on pair 7
    - nounA = b
    - nounB = c
    - student   distance() = 5
    - reference distance() = 1

  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
    - failed on pair 6
    - nounA = a
    - nounB = g
    - student   distance() = 5
    - reference distance() = 4

  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
    - failed on pair 42
    - nounA = f
    - nounB = h
    - student   distance() = 3
    - reference distance() = 2

  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
    - failed on pair 3
    - nounA = a
    - nounB = d
    - student   distance() = 3
    - reference distance() = 2

  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
    - failed on pair 2
    - nounA = a
    - nounB = c
    - student   distance() = 3
    - reference distance() = 1

  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
    - failed on pair 3
    - nounA = a
    - nounB = d
    - student   distance() = 3
    - reference distance() = 1

==> FAILED

Test 3: check distance() with random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
    - failed on pair 12 of 1000
    - nounA = glutelin
    - nounB = immunoglobulin_M
    - student   distance() = 6
    - reference distance() = 5

  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
    - failed on pair 27 of 1000
    - nounA = chymosin
    - nounB = agglutinin
    - student   distance() = 5
    - reference distance() = 4

  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - failed on pair 53 of 1000
    - nounA = plasma_protein
    - nounB = Ig
    - student   distance() = 3
    - reference distance() = 2

==> FAILED

Test 4: check sap() with random noun pairs
  * 1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
    - student sap() is too far to be a valid common ancestor when testing pair 33 of 1000
    - nounA = aspartic_acid
    - nounB = day_blindness
    - student   sap() = 'entity'
    - reference sap() = 'abstraction abstract_entity'
    - student   distance() = 20
    - reference distance() to 'abstraction abstract_entity' = 19

==> FAILED

Test 5: check sap() with all noun pairs
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
  * synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
    - student sap() is too far to be a valid common ancestor when testing pair 9 of 6
    - nounA = b
    - nounB = c
    - student   sap() = 'a'
    - reference sap() = 'c'
    - student   distance() = 5
    - reference distance() to 'c' = 1

  * synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
    - student sap() is too far to be a valid common ancestor when testing pair 9 of 11
    - nounA = a
    - nounB = i
    - student   sap() = 'c'
    - reference sap() = 'i'
    - student   distance() = 4
    - reference distance() to 'i' = 3

  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
    - student sap() is too far to be a valid common ancestor when testing pair 48 of 8
    - nounA = f
    - nounB = h
    - student   sap() = 'd'
    - reference sap() = 'f'
    - student   distance() = 3
    - reference distance() to 'f' = 2

  * synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
    - student sap() is too far to be a valid common ancestor when testing pair 4 of 8
    - nounA = a
    - nounB = d
    - student   sap() = 'd'
    - reference sap() = 'h'
    - student   distance() = 3
    - reference distance() to 'h' = 2

  * synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
    - student sap() is too far to be a valid common ancestor when testing pair 3 of 11
    - nounA = a
    - nounB = c
    - student   sap() = 'f'
    - reference sap() = 'c'
    - student   distance() = 3
    - reference distance() to 'c' = 1

  * synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
    - student sap() is too far to be a valid common ancestor when testing pair 4 of 8
    - nounA = a
    - nounB = d
    - student   sap() = 'h'
    - reference sap() = 'd'
    - student   distance() = 3
    - reference distance() to 'd' = 1
    - actual distance to 'h' = 2

==> FAILED

Test 6: check sap() with random noun pairs
  * 1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
    - student sap() is too far to be a valid common ancestor when testing pair 11 of 1000
    - nounA = IgM
    - nounB = gelatine
    - student   sap() = 'protein'
    - reference sap() = 'simple_protein'
    - student   distance() = 7
    - reference distance() to 'simple_protein' = 6

  * 1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
    - student sap() is too far to be a valid common ancestor when testing pair 44 of 1000
    - nounA = factor_I
    - nounB = immunoglobulin_D
    - student   sap() = 'protein'
    - reference sap() = 'plasma_protein'
    - student   distance() = 6
    - reference distance() to 'plasma_protein' = 5

  * 1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - student sap() is too far to be a valid common ancestor when testing pair 216 of 1000
    - nounA = midriff
    - nounB = abducens
    - student   sap() = 'body_part'
    - reference sap() = 'animal_tissue'
    - student   distance() = 10
    - reference distance() to 'animal_tissue' = 7

==> FAILED

Test 7: check whether WordNet is immutable
  * synsets = synsets.txt; hypernyms = hypernyms.txt
==> passed

Test 8: check constructor when input is not a rooted DAG
  * synsets3.txt, hypernyms3InvalidTwoRoots.txt
  * synsets3.txt, hypernyms3InvalidCycle.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidTwoRoots.txt
  * synsets6.txt, hypernyms6InvalidCycle.txt
    - constructor fails to throw an exception
    - it should throw a java.lang.IllegalArgumentException

  * synsets6.txt, hypernyms6InvalidCycle+Path.txt
==> FAILED

Test 9: check isNoun()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
==> passed

Test 10: check nouns()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
  * synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
==> passed

Test 11: check whether two WordNet objects can be created at the same time
  * synsets1 = synsets15.txt; hypernyms1 = hypernyms15Tree.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
  * synsets1 = synsets.txt; hypernyms1 = hypernyms.txt
    synsets2 = synsets15.txt; hypernyms2 = hypernyms15Path.txt
==> passed

Test 12: call distance() and sap() with invalid arguments
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "b"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "b", nounB = "x"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "a"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = "x"
  * synsets15.txt, hypernyms15Tree.txt, nounA = "a", nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "a"
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = "x", nounB = null
  * synsets15.txt, hypernyms15Tree.txt, nounA = null, nounB = "x"
==> passed

Test 13: call isNoun() with a null argument
  * synsets15.txt, hypernyms15Path.txt
==> passed

Test 14: random calls to isNoun(), distance(), and sap(), with
         probabilities p1, p2, and p3, respectively
  * 100 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0)
    - failed on call 26 to distance()
    - nounA = kicker
    - nounB = Thessalia
    - student   distance() = 12
    - reference distance() = 11

  * 100 random calls (p1 = 0.5, p2 = 0.0, p3 = 0.5)
    - student sap() is too far to be a valid common ancestor when testing pair 23 of 100
    - nounA = Motown
    - nounB = clinical_psychologist
    - student   sap() = 'physical_object object'
    - reference sap() = 'physical_entity'
    - student   distance() = 14
    - reference distance() to 'physical_entity' = 11
    - actual distance to 'physical_object object' = 12

    - failed on call 23 to sap()
  * 100 random calls (p1 = 0.0, p2 = 0.5, p3 = 0.5)
    - failed on call 3 to distance()
    - nounA = integrating
    - nounB = fixed-cycle_operation
    - student   distance() = 12
    - reference distance() = 11

  * 100 random calls (p1 = 0.2, p2 = 0.4, p3 = 0.4)
    - student sap() is too far to be a valid common ancestor when testing pair 1 of 100
    - nounA = stored_program
    - nounB = perchloromethane
    - student   sap() = 'entity'
    - reference sap() = 'abstraction abstract_entity'
    - student   distance() = 15
    - reference distance() to 'abstraction abstract_entity' = 14

    - failed on call 1 to sap()
==> FAILED


Total: 6/14 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference SAP and WordNet)
********************************************************************************

Testing correctness of Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check outcast() on WordNet digraph
        (synsets.txt and hypernyms.txt)

    java.lang.UnsupportedOperationException: wordnet

    Outcast.<init>(Outcast.java:13)
    TestOutcast.test1(TestOutcast.java:61)
    TestOutcast.main(TestOutcast.java:145)

==> FAILED

Test 2: check outcast() on WordNet subgraph
        (synsets50000-subgraph.txt and hypernyms50000-subgraph.txt)

    java.lang.UnsupportedOperationException: wordnet

    Outcast.<init>(Outcast.java:13)
    TestOutcast.test2(TestOutcast.java:109)
    TestOutcast.main(TestOutcast.java:148)

==> FAILED


Total: 0/2 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of SAP
*-----------------------------------------------------------
Running 1 total tests.

digraph G             = digraph-wordnet.txt
vertices in G         = 82192
edges    in G         = 84505
student     memory    = 8347880 bytes
reference   memory    = 10320408 bytes
ratio                 = 0.81
maximum allowed ratio = 2.50

Total: 1/1 tests passed!


================================================================



Analyzing memory of WordNet
*-----------------------------------------------------------
Running 3 total tests.

Test 1a: check memory of WordNet object
  * synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
    - number of vertices in digraph = 1000
    - number of edges    in digraph = 1008
    - student   memory              = 1268424 bytes
    - reference memory              = 1441648 bytes
    - student / reference ratio     = 0.9
    - maximum allowed rato          = 2.0

==> passed

Test 1b: check memory of WordNet object
  * synsets = synsets5000-subgraph.txt; hypernyms = hypernyms5000-subgraph.txt
    - number of vertices in digraph = 5000
    - number of edges    in digraph = 5059
    - student   memory              = 6219864 bytes
    - reference memory              = 7042952 bytes
    - student / reference ratio     = 0.9
    - maximum allowed rato          = 2.0

==> passed

Test 1c: check memory of WordNet object
  * synsets = synsets10000-subgraph.txt; hypernyms = hypernyms10000-subgraph.txt
    - number of vertices in digraph = 10000
    - number of edges    in digraph = 10087
    - student   memory              = 14659416 bytes
    - reference memory              = 16172688 bytes
    - student / reference ratio     = 0.9
    - maximum allowed rato          = 2.0

==> passed

Total: 3/3 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing SAP
*-----------------------------------------------------------
Running 14 total tests.

Test 1: time SAP constructor
   *  digraph-wordnet.txt
      -  student solution time =  0.03 seconds
      -  maximum allowed  time =  1.00 seconds
==> passed

Test 2a-c: time length() and ancestor() with random pairs of vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:  630019.00
     -  student   solution calls per second:    1075.00
     -  reference / student ratio:               586.06

=> passed      student <= 50000x reference
=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference

Test 3a-c: time length() and ancestor() with random subsets of 5 vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:  218274.00
     -  student   solution calls per second:    1422.00
     -  reference / student ratio:               153.50

=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> passed      student <=   500x reference

Test 4a-c: time length() and ancestor() with random subsets of 100 vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:   13189.00
     -  student   solution calls per second:    1031.00
     -  reference / student ratio:                12.79

=> passed      student <= 10000x reference
=> passed      student <=  5000x reference
=> passed      student <=  1000x reference
=> passed      student <=   500x reference

Test 5: Time 10 calls to length() and ancestor() on random path graphs
        (must handle V = 65536 in under 2 seconds)

             V  seconds
        ---------------
         16384     0.06
         32768     0.21
         65536     0.34
==> passed


Total: 14/14 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP)
********************************************************************************

Timing WordNet
*-----------------------------------------------------------
Running 11 total tests.

Test 1: check that exactly two In object created
        (one for synsets file and one for hypernyms file)
    - student   In construct calls = 3
    - reference In construct calls = 2
    - minimum required             = 2
    - maximum allowed              = 2

==> FAILED

Test 2: count number of SAP operations when constructing a WordNet object
        and calling distance() and sap() three times each
  * calls to constructor = 6
    - minimum required   = 1
    - maximum allowed    = 1

  * calls to length()    = 3
  * calls to ancestor()  = 6

==> FAILED

Test 3: count Digraph operations during WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * number of synsets    = 82192
  * number of hypernyms  = 84505
  * calls to constructor = 1
  * calls to addEdge()   = 84505
  * calls to adj()       = 0
  * calls to outdegree() = 0
  * calls to indegree()  = 0
  * calls to reverse()   = 0
  * calls to toString()  = 0

==> passed

Test 4: count Digraph operations during 1000 calls each
        to distance() and sap()
  * synsets = synsets.txt; hypernyms = hypernyms.txt
  * calls to constructor = 2000
    - the distance() and sap() methods should not need to create new digraphs

  * calls to addEdge()   = 0
  * calls to adj()       = 42790
  * calls to reverse()   = 0
  * calls to toString()  = 0

==> FAILED

Test 5: time WordNet constructor
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - student constructor time =  0.46 seconds
    - maximum allowed     time = 10.00 seconds

==> passed

Test 6a-e: time sap() and distance() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second:  213271.50
    - student   solution calls per second:      94.75
    - reference / student ratio:              2250.89

=> passed    student <= 10000x reference
=> FAILED    student <=  1000x reference
=> FAILED    student <=   100x reference
=> FAILED    student <=    10x reference
=> FAILED    student <=     5x reference

Test 7: time isNoun() with random nouns
  * synsets = synsets.txt; hypernyms = hypernyms.txt
    - reference solution calls per second: 1111233.00
    - student   solution calls per second:  945615.00
    - reference / student ratio:                 1.18
    - allowed ratio:                             4.00
==> passed

Total: 4/11 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference SAP and WordNet)
********************************************************************************

Timing Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: count calls to methods in WordNet
Exception in thread "main" java.lang.UnsupportedOperationException: wordnet
	at Outcast.<init>(Outcast.java:13)
	at TimeOutcast.test1(TimeOutcast.java:111)
	at TimeOutcast.main(TimeOutcast.java:190)


Total: 0/2 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================